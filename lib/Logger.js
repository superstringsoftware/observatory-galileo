// Generated by CoffeeScript 1.10.0
(function() {
  var Observatory, ref;

  Observatory = (ref = this.Observatory) != null ? ref : {};

  Observatory.Logger = (function() {
    var messageBuffer;

    messageBuffer = [];

    function Logger(name, formatter1, useBuffer1, interval) {
      this.name = name;
      this.formatter = formatter1 != null ? formatter1 : Observatory.viewFormatters.basicConsole;
      this.useBuffer = useBuffer1 != null ? useBuffer1 : false;
      this.interval = interval != null ? interval : 3000;
      if (typeof formatter === 'boolean') {
        this.interval = this.useBuffer;
        this.useBuffer = this.formatter;
        this.formatter = Observatory.viewFormatters.basicConsole;
      }
      this.messageBuffer = [];
    }

    Logger.prototype.messageAcceptable = function(m) {
      return (m != null) && (m.timestamp != null) && (m.severity != null) && (m.isServer != null) && ((m.textMessage != null) || (m.htmlMessage != null));
    };

    Logger.prototype.addMessage = function(message, useBuffer) {
      if (useBuffer == null) {
        useBuffer = false;
      }
      if (!this.messageAcceptable(message)) {
        throw new Error("Unacceptable message format in logger: " + this.name);
      }
      if (this.useBuffer || useBuffer) {
        return this.messageBuffer.push(message);
      } else {
        return this.log(message);
      }
    };

    Logger.prototype.log = function(message) {
      throw new Error("log() function needs to be overriden to perform actual output!");
    };

    Logger.prototype.processBuffer = function() {
      var i, len, obj, ref1;
      if (!(this.messageBuffer.length > 0)) {
        return;
      }
      ref1 = this.messageBuffer;
      for (i = 0, len = ref1.length; i < len; i++) {
        obj = ref1[i];
        this.log(obj);
      }
      return this.messageBuffer = [];
    };

    return Logger;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).Observatory = Observatory;

}).call(this);
