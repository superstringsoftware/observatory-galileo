// Generated by CoffeeScript 1.10.0

/*

   * Commented out for Meteor usage

require = if Npm? then Npm.require else require
_ = require 'underscore'
 */

(function() {
  var Observatory, ref;

  Observatory = (ref = this.Observatory) != null ? ref : {};

  _.extend(Observatory, {
    LOGLEVEL: {
      SILENT: -1,
      FATAL: 0,
      ERROR: 1,
      WARNING: 2,
      INFO: 3,
      VERBOSE: 4,
      DEBUG: 5,
      MAX: 6,
      NAMES: ["FATAL", "ERROR", "WARNING", "INFO", "VERBOSE", "DEBUG", "MAX"]
    },
    settings: {
      maxSeverity: 3,
      printToConsole: false,
      profiling: {
        isOn: true,
        maxProfilingLevel: 2,
        DANGER_THRESHOLD: 1000,
        WARNING_THRESHOLD: 100
      }
    },
    initialize: function(settings) {
      var f, i, len, ref1, results;
      ref1 = this._initFunctions;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        f = ref1[i];
        results.push(f.call(this, settings));
      }
      return results;
    },
    registerInitFunction: function(f) {
      return this._initFunctions.push(f);
    },
    _initFunctions: [
      function(s) {
        var ref1;
        this._loggers = [];
        this.emitters = {};
        if (s != null) {
          this.settings.maxSeverity = s.logLevel != null ? this.LOGLEVEL[s.logLevel] : 3;
          this.settings.printToConsole = (ref1 = s.printToConsole) != null ? ref1 : true;
          if (s.profiling != null) {
            this.settings.profiling = s.profiling;
          }
        }
        this._consoleLogger = new Observatory.ConsoleLogger('default');
        if (this.settings.printToConsole) {
          this.subscribeLogger(this._consoleLogger);
        }
        this._defaultEmitter = new Observatory.Toolbox('Toolbox');
        this.emitters.Toolbox = this._defaultEmitter;
        return this.emitters.Toolbox.maxSeverity = this.settings.maxSeverity;
      }
    ],
    setSettings: function(s) {
      var k, ref1, results, v;
      if (s.profiling != null) {
        this.settings.profiling = s.profiling;
      }
      if (s.maxSeverity != null) {
        this.settings.maxSeverity = s.maxSeverity;
      } else {
        if (s.logLevel != null) {
          this.settings.maxSeverity = this.LOGLEVEL[s.logLevel];
        }
      }
      if ((s.printToConsole != null) && (s.printToConsole !== this.settings.printToConsole)) {
        this.settings.printToConsole = s.printToConsole;
        if (s.printToConsole === true) {
          this.subscribeLogger(this._consoleLogger);
        } else {
          this.unsubscribeLogger(this._consoleLogger);
        }
      }
      ref1 = this.emitters;
      results = [];
      for (k in ref1) {
        v = ref1[k];
        results.push(v.maxSeverity = this.settings.maxSeverity);
      }
      return results;
    },
    getDefaultLogger: function() {
      return this._defaultEmitter;
    },
    getToolbox: function() {
      return this._defaultEmitter;
    },
    isServer: function() {
      return !(typeof window !== "undefined" && window.document);
    },
    formatters: {
      basicFormatter: function(options) {
        var ref1;
        return {
          timestamp: new Date,
          severity: options.severity,
          textMessage: options.message,
          module: options.module,
          object: (ref1 = options.object) != null ? ref1 : options.obj,
          isServer: Observatory.isServer(),
          type: options.type
        };
      }
    },
    viewFormatters: {
      _convertDate: function(timestamp, long) {
        var ds;
        if (long == null) {
          long = false;
        }
        ds = this._lpad(timestamp.getUTCDate(), 2) + '/' + this._lpad(timestamp.getUTCMonth() + 1, 2);
        if (long) {
          ds = ds + +'/' + timestamp.getUTCFullYear();
        }
        return ds;
      },
      _convertTime: function(timestamp, ms) {
        var ts;
        if (ms == null) {
          ms = true;
        }
        ts = this._lpad(timestamp.getUTCHours(), 2) + ':' + this._lpad(timestamp.getUTCMinutes(), 2) + ':' + this._lpad(timestamp.getUTCSeconds(), 2);
        if (ms) {
          ts += '.' + this._lpad(timestamp.getUTCMilliseconds(), 3);
        }
        return ts;
      },
      _ps: function(s) {
        return '[' + s + ']';
      },
      _lpad: function(str, length, padStr) {
        if (str == null) {
          str = '';
        }
        if (length == null) {
          length = 0;
        }
        if (padStr == null) {
          padStr = '0';
        }
        length -= str.toString().length;
        while (length > 0) {
          str = padStr + str;
          length--;
        }
        return str;
      },
      basicConsole: function(o) {
        var full_message, t, ts;
        t = Observatory.viewFormatters;
        ts = t._ps(t._convertDate(o.timestamp)) + t._ps(t._convertTime(o.timestamp));
        full_message = ts + (o.isServer ? "[SERVER]" : "[CLIENT]");
        full_message += o.module ? t._ps(o.module) : "[]";
        full_message += t._ps(Observatory.LOGLEVEL.NAMES[o.severity]);
        full_message += " " + o.textMessage;
        if (o.object != null) {
          full_message += " | " + (JSON.stringify(o.object));
        }
        return full_message;
      }
    },
    _loggers: [],
    getLoggers: function() {
      return this._loggers;
    },
    subscribeLogger: function(logger) {
      return this._loggers.push(logger);
    },
    unsubscribeLogger: function(logger) {
      return this._loggers = _.without(this._loggers, logger);
    }
  });

  (typeof exports !== "undefined" && exports !== null ? exports : this).Observatory = Observatory;

}).call(this);
