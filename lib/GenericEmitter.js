// Generated by CoffeeScript 1.10.0
(function() {
  var Observatory, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Observatory = (ref = this.Observatory) != null ? ref : {};

  Observatory.GenericEmitter = (function(superClass) {
    extend(GenericEmitter, superClass);

    function GenericEmitter(name, maxSeverity, formatter) {
      var i, j, k, len, len1, m, ref1, ref2;
      this.maxSeverity = maxSeverity;
      if ((formatter != null) && typeof formatter === 'function') {
        this.formatter = formatter;
      } else {
        this.formatter = Observatory.formatters.basicFormatter;
      }
      GenericEmitter.__super__.constructor.call(this, name, this.formatter);
      ref1 = ['fatal', 'error', 'warn', 'info', 'verbose', 'debug', 'insaneVerbose'];
      for (i = j = 0, len = ref1.length; j < len; i = ++j) {
        m = ref1[i];
        this[m] = this._emitWithSeverity.bind(this, i);
      }
      ref2 = ['_fatal', '_error', '_warn', '_info', '_verbose', '_debug', '_insaneVerbose'];
      for (i = k = 0, len1 = ref2.length; k < len1; i = ++k) {
        m = ref2[i];
        this[m] = this._forceEmitWithSeverity.bind(this, i);
      }
    }

    GenericEmitter.prototype.trace = function(error, msg, module) {
      var message, ref1;
      message = msg + '\n' + ((ref1 = error.stack) != null ? ref1 : error);
      return this._emitWithSeverity(Observatory.LOGLEVEL.ERROR, message, error, module);
    };

    GenericEmitter.prototype._forceEmitWithSeverity = function(severity, message, obj, module, type, buffer) {
      var options;
      if (buffer == null) {
        buffer = false;
      }
      if (typeof message === 'object') {
        buffer = type;
        type = module;
        module = obj;
        obj = message;
        message = JSON.stringify(obj);
      }
      if (typeof obj === 'string') {
        buffer = type;
        type = module;
        module = obj;
        obj = null;
      }
      options = {
        severity: severity,
        message: message,
        object: obj,
        type: type,
        module: module != null ? module : this.name
      };
      return this.emitMessage(this.formatter(options), buffer);
    };

    GenericEmitter.prototype._emitWithSeverity = function(severity, message, obj, module, type, buffer) {
      if (buffer == null) {
        buffer = false;
      }
      if ((severity == null) || (severity > this.maxSeverity)) {
        return false;
      }
      return this._forceEmitWithSeverity(severity, message, obj, module, type, buffer);
    };

    return GenericEmitter;

  })(Observatory.MessageEmitter);

  (typeof exports !== "undefined" && exports !== null ? exports : this).Observatory = Observatory;

}).call(this);
