// Generated by CoffeeScript 1.10.0
(function() {
  var Observatory, ref;

  Observatory = (ref = this.Observatory) != null ? ref : {};

  Observatory.MessageEmitter = (function() {
    function MessageEmitter(name, formatter) {
      this.name = name;
      this.formatter = formatter;
      this._loggers = [];
      this.isOn = true;
    }

    MessageEmitter.prototype._getLoggers = function() {
      return this._loggers;
    };

    MessageEmitter.prototype.turnOn = function() {
      return this.isOn = true;
    };

    MessageEmitter.prototype.turnOff = function() {
      return this.isOn = false;
    };

    MessageEmitter.prototype.subscribeLogger = function(logger) {
      return this._loggers.push(logger);
    };

    MessageEmitter.prototype.unsubscribeLogger = function(logger) {
      return this._loggers = _.without(this._loggers, logger);
    };

    MessageEmitter.prototype.emitMessage = function(message, buffer) {
      var i, j, l, len, len1, ref1, ref2;
      if (buffer == null) {
        buffer = false;
      }
      if (!this.isOn) {
        return;
      }
      ref1 = Observatory.getLoggers();
      for (i = 0, len = ref1.length; i < len; i++) {
        l = ref1[i];
        l.addMessage(message, buffer);
      }
      if (this._loggers.length > 0) {
        ref2 = this._loggers;
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          l = ref2[j];
          l.addMessage(message, buffer);
        }
      }
      return message;
    };

    MessageEmitter.prototype.emitFormattedMessage = function(message, buffer) {
      if (buffer == null) {
        buffer = false;
      }
      if (this.isOn && (this.formatter != null) && (typeof this.formatter === 'function')) {
        this.emitMessage(this.formatter(message), buffer);
      }
      return message;
    };

    return MessageEmitter;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).Observatory = Observatory;

}).call(this);
